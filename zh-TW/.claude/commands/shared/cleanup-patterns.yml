# 清理模式與安全規則

## 安全→移除 (自動)
```yaml
Files: 
  - node_modules (如果 package-lock 存在)
  - dist/, build/, .next/, .nuxt/
  - .tmp, temp/, cache/
  - *.log, *.tmp, *.cache
  - .DS_Store, thumbs.db, desktop.ini
  - coverage/, .nyc_output/

Code:
  - console.log(), console.debug()
  - debugger; 陳述式
  - TODO 註解超過 30 天
  - 註解的程式碼區塊超過 7 天
  - 未使用的匯入 (如果安全分析確認)
```

## 需要確認 (手動)
```yaml
Files:
  - 大於 10MB 的大型檔案
  - git 中未追蹤的檔案
  - 使用者特定設定 (.vscode/, .idea/)
  - 包含資料的資料庫檔案、日誌

Code:
  - 未使用的函式 (如果沒有外部參考)
  - 死程式碼分支
  - 已棄用的 API 呼叫
  - 大型註解區塊

Deps:
  - package.json 中未使用的套件
  - 有安全漏洞的套件
  - 主要版本更新
  - 生產環境中的開發相依性
```

## 永不移除 (受保護)
```yaml
Files:
  - .env.example, .env.template
  - README.md, LICENSE, CHANGELOG
  - .gitignore, .gitattributes
  - package.json, package-lock.json
  - src/, lib/ 中的原始碼

Code:
  - 錯誤處理區塊
  - 類型定義
  - API 介面
  - 設定物件
  - 測試檔案

Dependencies:
  - 核心框架套件
  - 對等相依性
  - 生產環境使用的套件
```

## 風險評估
```yaml
LOW [1-3]:
  - 臨時檔案
  - 建置產物  
  - 日誌檔案
  - 快取目錄

MEDIUM [4-6]:
  - 未使用的程式碼
  - 舊的 git 分支
  - 開發相依性
  - 設定清理

HIGH [7-9]:
  - 相依性更新
  - Git 歷史變更
  - 生產設定
  - 資料庫清理

CRITICAL [10]:
  - 生產資料
  - 安全設定
  - 核心框架檔案
  - 使用者資料
```

## 清理策略
```yaml
Incremental:
  - 從安全檔案開始
  - 進展到程式碼清理
  - 完成相依性

Verification:
  - 程式碼清理後執行測試
  - 檔案清理後驗證建置
  - 相依性後檢查功能

Rollback:
  - 清理前 git 提交
  - 變更前備份設定
  - 記錄移除的內容
```